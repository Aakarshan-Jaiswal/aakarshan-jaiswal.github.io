{"version":3,"sources":["components/ui/navigation/Navigation.tsx","components/ui/card/Card.tsx","components/sorting-algo/bubble-sort/BubbleSort.tsx","components/sorting-algo/selection-sort/SelectionSort.tsx","components/ui/bar/Bar.tsx","components/ui/bars/Bars.tsx","components/ui/controls/Controls.tsx","components/ui/simulator/Simulator.tsx","components/ui/home/Home.tsx","components/ui/about/About.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navigation","menuItems","onNavigate","onNavItemClickHandler","e","target","childNodes","data","renderMenu","map","menuItem","index","className","onClick","toString","portalContainer","document","getElementById","Error","Fragment","ReactDOM","createPortal","Card","children","BubbleSort","array","speed","onPerformSorting","onSortingStarted","console","log","disabled","type","event","alert","arr","spd","t","setTimeout","j","temp","i","length","performSorting","SelectionSort","Bar","content","width","height","color","style","Bars","React","forwardRef","ref","totalBars","Math","floor","useState","updatedArray","setUpdatedArray","currentBar","setCurrentBar","comparedBar","setComparedBar","useEffect","renderBars","arrayItem","set","current","compared","useImperativeHandle","Controls","onSubmit","onGenerateArray","disableForm","setDisableForm","noOfBars","setNoOfBars","maxHeight","setMaxHeight","minHeight","setMinHeight","simSpeed","setSimSpeed","onBarsChangeHandler","Number","value","onMaxHeightChangeHandler","onMinHeightChangeHandler","onSimSpeedChangeHandler","preventDefault","htmlFor","min","max","step","onChange","id","Simulator","technique","controlRef","useRef","disableFormHandler","disable","randomArray","random","push","setArrayDetails","arrayDetails","no_of_bars","max_height","min_height","barsRef","onPerformSortingHandler","Array","sim_speed","algo","selectedAlgo","sortingAlgorithms","about","Home","simulateBtnHandler","setSimulateAlgo","sortingAlgorithm","simulateAlgo","About","App","navigation","setNavigation","renderNavigatedPage","navigatedMenu","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.668a6ce4.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './Navigation.css';\n\nconst Navigation=({menuItems,onNavigate}:{menuItems:Array<string>,onNavigate:(navigatedMenu:string)=>void})=>{\n  const onNavItemClickHandler = (e:any) =>{\n    onNavigate(e.target.childNodes[0].data);\n  }\n  const renderMenu=menuItems.map((menuItem,index)=>{\n    return (\n      <li className=\"nav-item\" key={index.toString()} onClick={onNavItemClickHandler}>\n        {menuItem}\n      </li>\n    )\n  })\n\n  const portalContainer=document.getElementById('App-header');\n  if(!portalContainer){\n    throw new Error(\"Navigation Container Doesnot Exist...!\");\n  }\n    return(\n      <React.Fragment>\n      {ReactDOM.createPortal(\n        <React.Fragment>\n          <h1 className=\"App-title\" >Sorting Algorithm Simulator</h1>\n          <nav className=\"nav\" >\n            <ul className=\"nav-list\">\n              {renderMenu}\n            </ul>\n          </nav>\n        </React.Fragment>,\n        portalContainer\n      )}\n      </React.Fragment>\n    )\n}\n\nexport default Navigation;","import React from \"react\";\nimport './Card.css';\n\nconst Card = ({children,className=\"\"}:{children:any,className?:string}) => {\n    return (\n        <div className={\"card \"+className}>{children}</div>\n    );\n}\n\nexport default Card;","import React from \"react\";\n\nconst BubbleSort=({array,speed,onPerformSorting,onSortingStarted}:{array:Number[],speed:number,onPerformSorting:any,onSortingStarted:any}) => {\n    console.log(\"array in Bubble sort:\\n\"+array)\n    let disabled =false;\n    const performSorting=(arr:Number[],spd:number)=>{\n        let t=1;\n        for (let i = 0; i < (arr.length-1); i++) {\n            for(let j=0;j<(arr.length-(i+1));j++){\n                setTimeout(()=>{\n                    onPerformSorting(arr,j,j+1);\n                    if(arr[j]>arr[j+1]){\n                        let temp=arr[j+1];\n                        arr[j+1]=arr[j];\n                        arr[j]=temp;\n                    }\n                    console.log(\"i=\"+i+\"\\nj=\"+j+\"\\narray=\"+arr+\"\\ntime=\"+t)\n                    if(i===arr.length-2){\n                        \n                        setTimeout(()=>{\n                            console.log(\"running\")\n                            disabled=false;\n                            onSortingStarted(false);\n                            onPerformSorting(arr,-1,-1)\n                        },1000*spd)\n                    }\n                },1000*t)\n                t+=spd;\n            }    \n        }\n    }\n    const onStartSimulationHandler=(event:any)=>{\n        if(!disabled) {\n            disabled = true;\n            onSortingStarted(true);\n            performSorting(array,speed)\n        }\n        else {\n            alert(\"Alredy Running a Simulation\")\n        }\n    }\n    return (\n        <React.Fragment>\n            <h1>Bubble Sorting</h1>\n            <div className=\"btn-container\">\n                <button className=\"simulation-btn\" type=\"button\" onClick={onStartSimulationHandler}>Start Simulation</button>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default BubbleSort;","import React from \"react\";\n\nconst SelectionSort=({array,speed,onPerformSorting,onSortingStarted}:{array:Number[],speed:number,onPerformSorting:any,onSortingStarted:any}) => {\n    console.log(\"array in selection sort:\\n\"+array)\n    let disabled =false;\n    const performSorting=(arr:Number[],spd:number)=>{\n        let t=1;\n        for (let i = 0; i < (arr.length-1); i++) {\n            for(let j=i+1;j<(arr.length);j++){\n                setTimeout(()=>{\n                    onPerformSorting(arr,i,j);\n                    if(arr[i]>arr[j]){\n                        let temp=arr[i];\n                        arr[i]=arr[j];\n                        arr[j]=temp;\n                    }\n                    console.log(\"i=\"+i+\"\\nj=\"+j+\"\\narray=\"+arr+\"\\ntime=\"+t)\n                    if(i===arr.length-2 && j===arr.length-1){\n                        \n                        setTimeout(()=>{\n                            console.log(\"running\")\n                            disabled=false;\n                            onSortingStarted(false);\n                            onPerformSorting(arr,-1,-1)\n                        },1000*spd)\n                    }\n                },1000*t)\n                t+=spd;\n            }    \n        }\n    }\n    const onStartSimulationHandler=(event:any)=>{\n        if(!disabled) {\n            disabled = true;\n            onSortingStarted(true);\n            performSorting(array,speed)\n        }\n        else {\n            alert(\"Alredy Running a Simulation\")\n        }\n    }\n    return (\n        <React.Fragment>\n            <h1>Selection Sorting</h1>\n            <div className=\"btn-container\">\n                <button className=\"simulation-btn\" type=\"button\" onClick={onStartSimulationHandler}>Start Simulation</button>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default SelectionSort;","import React from \"react\";\n\nimport \"./Bar.css\"\n\nconst Bar = ({content,width,height,color}:{content:string,width:string,height:string,color:string}) => {\n    \n    return (\n        <div className=\"column bar\" style={{['--width' as any]:width,['--height' as any]:height,['--color' as any]:color}}>\n            {content}\n        </div>\n    )\n}\n\nexport default Bar;\n","import React, { useEffect, useImperativeHandle, useState } from \"react\";\nimport Bar from \"../bar/Bar\";\nimport \"./Bars.css\";\n\nconst Bars=React.forwardRef(({array}:{array:Array<Number>},ref) => {\n    console.log(\"Array we get in Bars:\\n\"+array);\n    let totalBars=array.length;\n    let width=Math.floor(100/totalBars);\n    const [updatedArray,setUpdatedArray]=useState<Array<Number>>(array);\n    const [currentBar,setCurrentBar]=useState<Number>();\n    const [comparedBar,setComparedBar]=useState<Number>();\n    useEffect(()=>{\n        setUpdatedArray(array)\n        console.log(\"UPDATED \"+updatedArray)\n        console.log(\"PROP \"+array)\n    },[array])\n    const renderBars=updatedArray.map((arrayItem,index)=>{\n        let color=\"orange\";\n        if(index===currentBar){\n            color=\"red\";\n        }\n        if(index===comparedBar){\n            color=\"green\";\n        }\n        return <Bar content={arrayItem.toString()} width={width+\"%\"} height={arrayItem+\"px\"} color={color} key={index.toString()} />\n    })\n\n    const set=(arr:Array<number>,current:number,compared:number):void=>{\n        setUpdatedArray(arr);\n        setCurrentBar(current)\n        setComparedBar(compared)\n    }\n\n    useImperativeHandle(ref,()=>{\n        return {\n            set:set\n        }\n    })\n\n    return (\n                <div className=\"row bar-container\">\n                    {renderBars}\n                    {console.log(\"return: \"+updatedArray)}\n                </div>\n    )\n})\n\nexport default Bars;\n","import React, { useEffect, useImperativeHandle, useState } from \"react\";\n\nimport \"./Controls.css\";\n\nconst Controls = React.forwardRef(({ onSubmit, onGenerateArray}:{onSubmit:any, onGenerateArray:any},ref) => {\n    const [disableForm,setDisableForm]=useState(false);\n    useImperativeHandle(ref,()=>{\n        return{\n            setDisableForm:setDisableForm\n        }\n    })\n    const [noOfBars, setNoOfBars]=useState(5);\n    const [maxHeight, setMaxHeight]=useState(200);\n    const [minHeight, setMinHeight]=useState(50);\n    const [simSpeed, setSimSpeed]=useState(1);\n    const onBarsChangeHandler = (event:any) => {\n        setNoOfBars(Number(event.target.value))\n    }\n    const onMaxHeightChangeHandler = (event:any) => {\n        setMaxHeight(Number(event.target.value))\n    }\n    const onMinHeightChangeHandler = (event:any) => {\n        setMinHeight(Number(event.target.value))\n    }\n    const onSimSpeedChangeHandler = (event:any) => {\n        setSimSpeed(Number(event.target.value))\n    }\n    const onSettingsChangedHandler = (event:any) => {\n        event.preventDefault()\n        onSubmit(noOfBars,maxHeight,minHeight,simSpeed)\n    }\n    const onRandomClickHandler = (event:any) => {\n        onGenerateArray();\n    }\n    return (\n        <React.Fragment>\n            <form className=\"control-form\" onSubmit={onSettingsChangedHandler}>\n                <div className=\"input-container\">\n                    <label htmlFor=\"no_of_bars\">Number of Bars</label>\n                    <input type=\"range\" min=\"5\" max=\"20\" step=\"1\" value={noOfBars} onChange={onBarsChangeHandler} />\n                    <input type=\"number\"  id=\"no_of_bars\" min=\"5\" max=\"20\" step=\"1\" value={noOfBars} onChange={onBarsChangeHandler} />\n                </div>\n                <div className=\"input-container\">\n                    <label htmlFor=\"max_height\">Maximum height of Bars</label>\n                    <input type=\"range\" min=\"150\" max=\"300\" step=\"1\" value={maxHeight} onChange={onMaxHeightChangeHandler} />\n                    <input type=\"number\"  id=\"max_height\" min=\"150\" max=\"300\" step=\"1\" value={maxHeight} onChange={onMaxHeightChangeHandler} />\n                </div>\n                <div className=\"input-container\">\n                    <label htmlFor=\"min_height\">Minimum height of Bars</label>\n                    <input type=\"range\" min=\"50\" max=\"100\" step=\"1\" value={minHeight} onChange={onMinHeightChangeHandler} />\n                    <input type=\"number\"  id=\"min_height\" min=\"50\" max=\"100\" step=\"1\" value={minHeight} onChange={onMinHeightChangeHandler} />\n                </div>\n                <div className=\"input-container\">\n                    <label htmlFor=\"sim_speed\">Speed of Simulation</label>\n                    <input type=\"range\" min=\"1\" max=\"2\" step=\"0.1\" value={simSpeed} onChange={onSimSpeedChangeHandler} />\n                    <input type=\"number\"  id=\"sim_speed\" min=\"1\" max=\"2\" step=\"0.1\" value={simSpeed} onChange={onSimSpeedChangeHandler} />\n                </div>\n                <div className={\"btn-container \" + (disableForm?\"disabled\":\"\")}>\n                    <button className=\"simulation-btn\" type=\"submit\" disabled={disableForm}>Apply Changes</button>\n                </div>\n            </form>\n            <div className={\"btn-container \" + (disableForm?\"disabled\":\"\")}>\n                <button className=\"simulation-btn\" type=\"button\" onClick={onRandomClickHandler} disabled={disableForm}>Generate Random Array</button>\n            </div>\n        </React.Fragment>\n    )\n}\n)\nexport default Controls;","import React, { useEffect, useRef, useState } from \"react\";\nimport BubbleSort from \"../../sorting-algo/bubble-sort/BubbleSort\";\nimport SelectionSort from \"../../sorting-algo/selection-sort/SelectionSort\";\nimport Bars from \"../bars/Bars\";\nimport Controls from \"../controls/Controls\";\nimport \"./Simulator.css\";\n\nconst Simulator=({technique}:{technique:string}) => {\n    const controlRef=useRef<any>();\n    const disableFormHandler=(disable:boolean)=>{\n        controlRef.current.setDisableForm(disable)\n    }\n    /**\n    *FUNCTION TO GENERATE RANDOM ARRAY\n    */\n    const randomArray=(totalBars:number,maxHeight:number,minHeight:number):Array<Number>=>{\n        \n        let arr=[];\n        for(let i=0;i<totalBars;i++){\n            let height=Math.floor(Math.random() * (maxHeight - minHeight) + minHeight);\n            arr.push(height);\n        }\n        return arr;\n    }\n\n    /**\n    *STATE VARIABLE OF ARRAY\n    */\n    useEffect(()=>{\n        setArrayDetails({...arrayDetails,array:randomArray(arrayDetails.no_of_bars,arrayDetails.max_height,arrayDetails.min_height)})\n    },[])\n\n    /**\n     * useRef VARIABLE FOR BARS COMPONENT \n     */\n    const barsRef=useRef<any>();\n\n    /**\n    *FUNCTON CALLED BY SORTING TECHNIQUE COMPONENT WHICH PROVIDES ARRAY ON EVERY STEP OF SORTING\n    */\n    const onPerformSortingHandler=(arr:Number[],currentBar:number,comparedBar:number)=>{\n        console.log(arr)\n        barsRef.current.set([])\n        barsRef.current.set(arr,currentBar,comparedBar)\n    }\n\n    /**\n    *FUNCTION THAT RETURNS THE SELECTED ALGORITHM\n    */\n    const selectedAlgo= (algo:string) => {\n        switch(algo){\n            case \"Selection Sort\":\n                return <SelectionSort speed={arrayDetails.sim_speed} array={arrayDetails.array} onPerformSorting={onPerformSortingHandler} onSortingStarted={disableFormHandler} />;\n            case \"Bubble Sort\":\n                return <BubbleSort speed={arrayDetails.sim_speed} array={arrayDetails.array} onPerformSorting={onPerformSortingHandler} onSortingStarted={disableFormHandler}/>;\n            default:\n                return <h1>Found no such Algorithm</h1>;\n        }\n    }\n\n    /**\n    * ARRAY STATE VARIABLE \n    */\n    const [arrayDetails,setArrayDetails] = useState({array:new Array(),no_of_bars:5, max_height:200 ,min_height:50 ,sim_speed:1})\n\n    /**\n    *ON SUBMITTING THE CONTROL FORM \n    */\n    const onControlsSubmitHandler = (noOfBars:number,maxHeight:number,minHeight:number,simSpeed:number) => {\n        console.log(noOfBars,maxHeight,minHeight,simSpeed)\n        if(noOfBars!==arrayDetails.no_of_bars || maxHeight!==arrayDetails.max_height || minHeight!==arrayDetails.min_height){\n            setArrayDetails({array:randomArray(noOfBars,maxHeight,minHeight) ,no_of_bars:noOfBars, max_height:maxHeight ,min_height:minHeight ,sim_speed:simSpeed})\n        }\n        else{\n            setArrayDetails({...arrayDetails,sim_speed:simSpeed})\n        }\n        console.log(arrayDetails)\n    }\n\n    /**\n    *ON REQUESTING NEW RAMDOM ARRAY \n    */\n    const generateRandomArrayHandler = () => {\n        setArrayDetails({...arrayDetails,array:randomArray(arrayDetails.no_of_bars,arrayDetails.max_height,arrayDetails.min_height)})\n    }\n\n    return (\n        <React.Fragment>\n            {selectedAlgo(technique)}\n            <div className=\"row\">\n                <div className=\"column\" style={{['--width' as any]:'59%',['--color' as any]:\"lightgrey\"}}>\n                    <h2>Simulator</h2>\n                    {console.log(\"array before sending:\\n\"+(arrayDetails.array))}\n                    <Bars array={arrayDetails.array} ref={barsRef}/>\n                </div>\n                <div className=\"column\" style={{['--width' as any]:'29%',['--color' as any]:\"lightgrey\"}}>\n                    <h2>Simulation Controls</h2>\n                    <Controls onSubmit={onControlsSubmitHandler} onGenerateArray={generateRandomArrayHandler} ref={controlRef} />\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default Simulator;\n","import React, { useState } from \"react\";\nimport Card from \"../card/Card\";\nimport Simulator from \"../simulator/Simulator\";\nimport './Home.css';\n\nconst sortingAlgorithms=[\n    {\n        technique:\"Selection Sort\",\n        about:\"The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from the unsorted part and putting it at the beginning. The algorithm maintains two subarrays in a given array.The subarray which already sorted. The remaining subarray was unsorted. In every iteration of the selection sort, the minimum element (considering ascending order) from the unsorted subarray is picked and moved to the sorted subarray. \"\n    }, \n    {\n        technique:\"Bubble Sort\",\n        about:\"Bubble sort works on the repeatedly swapping of adjacent elements until they are not in the intended order. It is called bubble sort because the movement of array elements is just like the movement of air bubbles in the water. Bubbles in water rise up to the surface; similarly, the array elements in bubble sort move to the end in each iteration.\"\n    },\n];\n\nconst Home=()=>{\n    const simulateBtnHandler = (e:any) => {\n        console.log(e.target.childNodes[0].value);\n        setSimulateAlgo([<Simulator technique={e.target.childNodes[0].value} />])\n    }\n    const [simulateAlgo, setSimulateAlgo] = useState(\n        sortingAlgorithms.map((sortingAlgorithm,index) =>{\n            return(\n                <Card className=\"sorting-card\" key={index}>\n                    <h2 className=\"sorting-card-heading\">{sortingAlgorithm.technique}</h2>\n                    <p>{sortingAlgorithm.about}</p>\n                    <button className=\"simulate-btn\" type=\"button\" onClick={simulateBtnHandler}><input type=\"hidden\" value={sortingAlgorithm.technique} />Simulate</button>\n                </Card>\n            )\n        })\n    )\n\n    return (\n        <div className=\"home\">\n            {simulateAlgo}\n        </div>\n    );\n}\n\nexport default Home;\n","import React from \"react\";\n\nimport \"./About.css\";\n\nconst About = () => {\n    return (\n        <div className=\"about\">\n            <h1>About Sorting Algorithm Simulator</h1>\n            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Velit molestiae corporis quo rerum ex ea totam minus reiciendis unde, fugiat accusantium amet numquam ab dolor laboriosam, et officiis architecto laudantium.</p>\n        </div> \n    );\n}\n\nexport default About;","import React, { useState } from 'react';\nimport './App.css';\nimport Navigation from './components/ui/navigation/Navigation';\nimport Home from './components/ui/home/Home';\nimport About from './components/ui/about/About';\n\nconst menuItems=[\"Home\",\"About\"];\n\nfunction App() {\n  const [navigation,setNavigation]= useState(menuItems[0]);\n  const onNavigatehandler = (navigatedMenu:string):void => {\n    setNavigation(navigatedMenu);\n  }\n  let renderNavigatedPage=<h1>Page Not Found...!</h1>\n    switch(navigation){\n      case \"Home\":\n        renderNavigatedPage= <Home />\n        break;\n      case \"About\" :\n        renderNavigatedPage= <About/>\n        break;\n      default:\n        <h1>Something Went Wrong...!</h1>\n    }\n  return (\n    <React.Fragment>\n      <Navigation menuItems={menuItems} onNavigate={onNavigatehandler} />\n      {renderNavigatedPage}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}